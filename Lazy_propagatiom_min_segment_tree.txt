#include <bits/stdc++.h>
#include <algorithm>
using namespace std;
#define vi             vector<ll> 
#define mi             map<ll,ll>
#define pi             pair<ll,ll>
#define pqueue         priority_queue<ll,vector<ll>,greater<ll>>
#define si             set<ll>
#define endl            "\n"
#define ins             insert 
#define hell             1000000007
#define INF             +2e+18
#define PI              3.1415926535897932384
#define ll              long long 
#define f               first
#define s              second
#define pb             push_back
#define pp             pop_back
#define fr(n)          for(ll i=0;i<n;i++)
#define FAST           ios_base::sync_with_stdio(false); cin.tie(NULL);
#define narak             998244353 
#define decimal(n)  std::cout << std::fixed;std::cout << std::setprecision(n);
#define make make_pair
#define mem0(a)         memset(a,0,sizeof(a))
#define mem1(a)         memset(a,-1,sizeof(a))
#define ALL(v) v.begin(), v.end()
#define SORT(v) sort(ALL(v))  
#define REVERSE(v) reverse(ALL(v))
#define maxc(v) max_element(all(v))
#define minc(v) min_element(all(v))
#define GCD(m,n) __gcd(m,n)
#define LCM(m,n) m*(n/GCD(m,n))
#define sz(a) (ll)a.size()
#define loop(i,a,b) for(ll i=a;i<=b;i++)
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

//template <typename T>
//using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>
//#define ordered_set tree<pair<int,int>, null_type,less<pair<int,int>>, rb_tree_tag,tree_order_statistics_node_update>
//std::ifstream in("input.txt");
//std::ofstream out("output.txt");


INT_MIN Minimum value for a variable of type int. -2147483647 
INT_MAX Maximum value for a variable of type int.  2147483647
LLONG_MIN Minimum value for a variable of type long long. -9,223,372,036,854,775,807 
LLONG_MAX Maximum value for a variable of type long long.  9,223,372,036,854,775,807


bool comp(ll a,ll b) 
{ return (a < b); } 

map<ll,ll>allpowofno(ll n)
{
    map<ll,ll>mp;
    for(ll i=2;i*i<=n;i++)
    {
        if(n%i==0)
        {
            mp[i]++;
            n/=i;
            i--;
        }
    }
    if(n!=1)
    mp[n]++;
    return mp;}
ll primepow(ll n,ll k)
{
    ll res=0;
    while(n)
    {
      n/=k;
      res+=n;
    }
    return res;}
ll allpowofnocomp(ll n,ll k)
{
    mi mp=allpowofno(k);
    ll ans;
    for(auto it=mp.begin();it!=mp.end();++it)
    {
        cout<<it->f<<" "<<it->s<<endl;
        ll z=primepow(n,it->f);
        ans=min(ans,z/(it->s));
    }
    return ans;    }


bool sortbysec(const pair<ll,ll> &a, const pair<ll,ll> &b) 
{
  return (a.second < b.second); 
} 



ll modInverse(ll n,ll p) 
{ 
    return power(n,p-2,p); 
}


void buildtree(ll *tree,ll *s,ll index,ll start,ll end)
{
    if(start>end)
    return ;
    if(start==end)
    {
        tree[index]=s[start];
        return;
    }
    ll mid=(start+end)/2;
    buildtree(tree,s,2*index,start,mid);
    buildtree(tree,s,2*index+1,mid+1,end);
    ll left=tree[2*index];
    ll right=tree[2*index+1];
    tree[index]=max(left,right);
    return ;
}
ll query(ll *tree,ll index,ll s,ll e,ll qs,ll qe)
{
    // no overlap
    if(qs>e||s>qe)
    return int_MIN;
    if(qe>=e&&s>=qs)
    {
        return tree[index];
    }
    ll mid=(s+e)/2;
    ll left=query(tree,2*index,s,mid,qs,qe);
    ll right=query(tree,2*index+1,mid+1,e,qs,qe);
    return max(left,right);
}
buildtree(tree,s,1,0,n-1); // 1 based tree is formed but array is 0 based
query(tree,1,0,n-1,x,y); // x and y are indexss


vector<ll>fac(200005);
void build()
{
    fac[0]=1;
    fac[1]=1;
    for(ll i=2;i<=200000;i++)
    {
        fac[i]=i*fac[i-1];
        fac[i]%=N;
    }

}



ll power(ll x,ll y,ll p)
{
    ll res = 1; // Initialize result
    x = x % p; // Update x if it is more than or equal to p
    while (y > 0) 
    {
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res * x) % p;
        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x) % p;
    }
    return res;
}
ll modInverse(ll n,ll p)
{
    return power(n, p - 2, p);
}
 
// Returns nCr % p using Fermat's little
// theorem.
ll ncr(ll n,ll r,ll p)
{
    // If n<r, then nCr should return 0
    if (n < r)
        return 0;
    // Base case
    if (r == 0)
        return 1;
 
    // Fill factorial array so that we
    // can find all factorial of r, n
    // and n-r
    
 
    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p;
}











const ll N=100005;
ll lpf[N],mobius[N];

void LPF()
{
    lpf[1]=1;
    for(ll i=2;i<N;i++)
    {
        if(!lpf[i])
        {
            for(ll j=i;j<N;j+=i)
            {
                if(!lpf[j])
                {
                    lpf[j]=i;
                }
            }
        }
        
    }
    return ;
    
}

void Mobius()
{
    mobius[1]=1;
    for(ll i=2;i<=N-2;++i)
    {
        if(lpf[i/lpf[i]]==lpf[i])
            mobius[i]=0;
        else
            mobius[i]=-1*mobius[i/lpf[i]];
    }
}


*/

// start and end represent the range a node is represnting

void updaterange(ll tree[],ll startrange,ll endrange, ll start,ll end,ll pos,ll value)
{
       if(start > end || startrange > end || endrange<  start ) 
        {
            return;
        }

        if(start == end) 
        {
            tree[pos] += value;
            return;
        }

        int mid = (start + end)/2;
        updaterange(tree, startrange , endrange, start , mid, 2 * pos + 1,  value);
        updaterange(tree, startrange , endrange, mid + 1,end, 2 * pos + 2, value);
        tree[pos] = min(tree[2*pos+1], tree[2*pos+2]);
}


ll querylazy(ll tree[],ll lazy[], ll qlow, ll qhigh, ll start, ll end, ll pos) 
{

        if(start > end) 
        {
            return INT_MAX;
        }
        //make sure all propagation is done at pos. If not update tree
        //at pos and mark its children for lazy propagation.
        if (lazy[pos] != 0) 
        {
            tree[pos] += lazy[pos];
            if (start != end) 
            { //not a leaf node
                lazy[2 * pos + 1] += lazy[pos];
                lazy[2 * pos + 2] += lazy[pos];
            }
            lazy[pos] = 0;
        }

        //no overlap
        if(qlow > end || qhigh < start)
        {
            return INT_MAX;
        }

        //total overlap
        if(qlow <= start && qhigh >= end)
        {
            return tree[pos];
        }
        //partial overlap
        ll mid = (start+end)/2;
        ll left=querylazy(tree, lazy, qlow, qhigh, start , mid, 2 * pos + 1);
        ll right=querylazy(tree, lazy,  qlow, qhigh, mid + 1, end , 2 * pos + 2);
        return min(left,right);
}
void updatenode(ll tree[],ll start,ll end,ll pos,ll index,ll value)
{
    
        if(index < start || index > end)
        {
            return;
        }
        
        if(start== end)
        {
            tree[pos] = value;
            return;
        }
        
        int mid = (start + end)/2;
        updatenode(tree, start, mid, 2 * pos + 1 , index, value);
        updatenode(tree, mid+1, end, 2 * pos + 2, index, value);
        tree[pos] = min(tree[2*pos+1], tree[2*pos + 2]);
}


ll query(ll tree[],ll qlow,ll qhigh,ll start,ll end,ll pos)
{
        if(qlow <= start && qhigh >= end)
        {
            return tree[pos];
        }
        if(qlow > end || qhigh < start)
        {
            return INT_MAX;
        }
        int mid = (start+end)/2;
        return min(query(tree, qlow, qhigh, start, mid,  2 * pos + 1), query(tree, qlow, qhigh, mid + 1, end , 2 * pos + 2));    
}


void buildtree(ll tree[],ll a[],ll low,ll high,ll  pos)
{
        if(low>high)
        return ;
        if(low == high)
        {
            tree[pos] = a[low];
            return;
        }
        int mid = (low + high)/2;
        buildtree(tree, a , low, mid, 2 * pos + 1);
        buildtree(tree, a , mid + 1, high, 2 * pos + 2);
        tree[pos] = min(tree[2*pos+1],tree[2*pos+2]);
        return ;
}


void updatelazy(ll tree[],ll lazy[],ll startrange,ll endrange,ll start,ll end, ll pos,ll value)
{
      if( start > end)
      {
            return;
        }

        //make sure all propagation is done at pos. If not update tree
        //at pos and mark its children for lazy propagation.
        if (lazy[pos] != 0) 
        {
            tree[pos] += lazy[pos];
            if ( start != end)
            { //not a leaf node
                lazy[2 * pos + 1] += lazy[pos];
                lazy[2 * pos + 2] += lazy[pos];
            }
            lazy[pos] = 0;
        }

        //no overlap condition
        if(startrange > end || endrange < start)
        {
            return;
        }

        //total overlap condition
        if(startrange <= start && endrange >= end) 
        {
            tree[pos] += value;
            if(start != end) 
            {
                lazy[2*pos + 1] += value;
                lazy[2*pos + 2] += value;
            }
            return;
        }

        //otherwise partial overlap so look both left and right.
        int mid = (start + end)/2;
        updatelazy(tree, lazy, startrange, endrange, start , mid, 2*pos+1, value);
        updatelazy(tree, lazy, startrange, endrange, mid+1, end , 2*pos+2,value);
        tree[pos] = min(tree[2*pos + 1], tree[2*pos + 2]);

}




    // NOTE : ZERO BASED INDEXED TREE IS BUILT 
void solve(ll nn)
{
    ll n,q;
    cin>>n>>q;
    
    ll a[n];
    char ch[n];
    
    fr(n)  
    {
        char x;
        cin>>x;
        ch[i]=x;
        if(x=='(')
        a[i]=1;
        else
        a[i]=-1;
    }
    ll tree[4*n+1];
    ll lazy[4*n+1];
    memset(lazy,0,sizeof(lazy));
    
    for(ll i=1;i<n;i++)
    {
        a[i]+=a[i-1];
    }
    
    
    buildtree(tree,a,0,n-1,0); 
    // NOTE : ZERO BASED INDEXED TREE IS BUILT 
    
    
    while(q--)
    {
        ll x,qs,qe;
        cin>>x>>qs>>qe;
        qs--;
        qe--;
        if(x==2)
        {
            if((qs-qe)%2==0 or ch[qs]==')')
            {
                cout<<"No"<<endl;
                continue;
            }
            ll z1=querylazy(tree,lazy,qs, qs, 0,n-1,(ll) 0);
            ll z2=querylazy(tree,lazy,qe, qe, 0,n-1,(ll) 0);
            ll z=querylazy(tree,lazy,qs+1, qe, 0,n-1,(ll) 0);
            //cout<<z1<<" "<<z2<<" "<<z<<endl;
            if(z+1==z1 and z2==z1-1)
            {
                cout<<"Yes"<<endl;
            }
            else
            {
                cout<<"No"<<endl;
            }
    
            
        }
        else
        {
            if(ch[qs]==ch[qe])
            continue;
            else
            {
                if(ch[qe]==')')
                {
                    updatelazy(tree,lazy,qs, qe-1, 0, n-1 ,0, -2);
                }
                else
                {
                    updatelazy(tree,lazy,qs, qe-1, 0, n-1 ,0, 2);
                }
                swap(ch[qs],ch[qe]);
            }
        //    for(ll i=0;i<n;i++)
          //  cout<<querylazy(tree,lazy,qs, qs, 0,n-1,(ll) 0)<<" ";
            //cout<<endl;
        }
    }
    
    
    /*ll qlow=1;
    ll qhigh=4;
    cout<<query(tree,qlow,qhigh,0,n-1,(ll)0); // NOTE : QLOW IS STARTING INDEX WHILE QHIGH IS FINISHING INDEX  start is zero while end in n-1
    // INDEXING IS ZERO BASED 
    ll index=2;
    ll value=-2;
    updatenode(tree,0,n-1,0,index,value);// NOTE : ZERO BASED INDEXED TREE IS BUILT
  
    cout<<endl<<query(tree,qlow,qhigh,0,n-1,(ll)0); 
  
    ll qs=1,qe=4;
    value=-4;
    updaterange(tree,qs,qe,0,n-1,0,value);
    cout<<endl<<query(tree,qlow,qhigh,0,n-1,(ll)0);
    // NOTE : ZERO BASED INDEXED TREE IS BUILT
    
    ll startrange=1;
    ll endrange=4;
    

    */
}





 
int main()
{ 
   decimal(15);
   FAST;
   
   //build();
   ll t;
   t=1;
   //cin>>t;  
   for(ll i=1;i<=t;i++)
   solve(i);
   return 0;
}





