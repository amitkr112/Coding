/**
     Failing doesnâ€™t give you a reason to give up,
     as long as you believe.
                                  - Seventh Hokage
                                   (COPIED TEXT FROM BABUMOSHAI)
**/

#include <bits/stdc++.h>
#include <algorithm>
#include <string>
using namespace std;
//#include <ext/pb_ds/assoc_container.hpp> 
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template <typename T>
//using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define vi             vector<ll> 
#define mi             map<ll,ll>
#define pi             pair<ll,ll>
#define si             set<ll>
#define endl            "\n"
#define ins             insert 
#define hell             1000000007
#define PI              3.1415926535897932384
#define ll              long long 
#define f               first
#define s              second
#define pb             push_back
#define pp             pop_back
#define dash()         cout<<"--------"<<endl
#define fr(n)          for(ll i=0;i<n;i++)
#define FAST           ios_base::sync_with_stdio(false); cin.tie(NULL);
#define narak             998244353 
#define decimal(n)  std::cout << std::fixed;std::cout << std::setprecision(n);
#define make make_pair
#define mem0(a)         memset(a,0,sizeof(a))
#define mem1(a)         memset(a,-1,sizeof(a))
#define ALL(v) v.begin(), v.end()
#define SORT(v) sort(ALL(v))  
#define REVERSE(v) reverse(ALL(v))
#define maxc(v) max_element(all(v))
#define minc(v) min_element(all(v))
#define GCD(m,n) __gcd(m,n)
#define LCM(m,n) m*(n/GCD(m,n))
#define sz(a) (ll)a.size()
#define loop(i,a,b) for(ll i=a;i<=b;i++)

// for debugging

#define see(x)         cout<<#x<<" = "<<x<<endl
#define see2(x,y)      cout<<#x<<" = "<<x<<"::"<<#y<<" = "<<y<<endl


//std::ifstream in("input.txt");
//std::ofstream out("output.txt");
/*

INT_MIN Minimum value for a variable of type int. -2147483647 
INT_MAX Maximum value for a variable of type int.  2147483647
LLONG_MIN Minimum value for a variable of type long long. -9,223,372,036,854,775,807 
LLONG_MAX Maximum value for a variable of type long long.  9,223,372,036,854,775,807


bool comp(ll a,ll b) 
{ return (a < b); } 




bool sortbysec(const pair<ll,ll> &a, const pair<ll,ll> &b) 
{
  return (a.second < b.second); 
} 






void buildtree(ll *tree,ll *a,ll index,ll start,ll end)
{
    if(start>end)
    return ;
    if(start==end)
    {
        tree[index]=a[start];
        return;
    }
    ll mid=(start+end)/2;
    buildtree(tree,a,2*index,start,mid);
    buildtree(tree,a,2*index+1,mid+1,end);
    ll left=tree[2*index];
    ll right=tree[2*index+1];
    tree[index]=min(left,right);
    return ;
}
ll query(ll *tree,ll index,ll s,ll e,ll qs,ll qe)
{
    // no overlap
    if(qs>e||s>qe)
    return INT_MAX;
    if(qe>=e&&s>=qs)
    {
        return tree[index];
    }
    ll mid=(s+e)/2;
    ll left=query(tree,2*index,s,mid,qs,qe);
    ll right=query(tree,2*index+1,mid+1,e,qs,qe);
    return min(left,right);
}
void updatenode(ll *tree,ll index,ll s,ll e,ll i,ll val)
{
    if(i>e||i<s)
    return ;
    if(s==e)
    {
        tree[index]=val;
        return ;
    }
    ll mid=(s+e)/2;
    updatenode(tree,2*index,s,mid,i,val);
    updatenode(tree,2*index+1,mid+1,e,i,val);
    tree[index]=min(tree[2*index],tree[2*index+1]);
    return ;
}
void updaterange(ll *tree,ll index,ll s,ll e,ll rs,ll re,ll val)
{
    if(rs>e||s>re)
    return ;
    if(rs<=s and e<=re)
    {
        tree[index]=val;
        return ;
    }
    ll mid=(s+e)/2;
    updaterange(tree,2*index,s,mid,rs,re,val);
    updaterange(tree,2*index+1,mid+1,e,rs,re,val);
    ll left=tree[2*index];
    ll right=tree[2*index+1];
    tree[index]=min(left,right);
    return ;
}
int main()
{
    ll n;
    n=6;
    ll a[]={1,2,3,4,5,60};
    ll *tree=new ll[4*n+1];
    ll index=1;
    ll start=0;
    ll end=n-1;
    buildtree(tree,a,index,start,end);
    ll q;
    cin>>q;
    //updatenode(tree,1,0,n-1,1,18);
    updaterange(tree,1,0,n-1,2,3,18);
    while(q--)
    { 
        ll qs,qe;
        cin>>qs>>qe;
        cout<<query(tree,1,0,n-1,qs,qe)<<" ";
     }
    return 0;
}SEGMENT TREE
buildtree(tree,s,1,0,n-1); // 1 based tree is formed but array is 0 based
query(tree,1,0,n-1,x,y); // x and y are indexss







void solve()
{
    
}
int main() 
{ 
   //decimal(15);
   FAST;
   //build();
   ll t;
   t=1;
   cin>>t;  
   while(t--)
   solve();
   return 0;
}