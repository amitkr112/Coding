void topologicalSortUtil(int v, bool visited[],
                                stack<int>& Stack)
{
    // Mark the current node as visited.
    visited[v] = true;
 
    // Recur for all the vertices
    // adjacent to this vertex
    for ( auto i = g[v].begin(); i != g[v].end(); ++i)
        if (!visited[*i])
            topologicalSortUtil(*i, visited, Stack);
 
    // Push current vertex to stack
    // which stores result
    Stack.push(v);
}
 
// The function to do Topological Sort.
// It uses recursive topologicalSortUtil()
vector<int> topologicalSort()
{
    stack<int> Stack;
 
    // Mark all the vertices as not visited
    bool* visited = new bool[n+1];
    for (int i = 1; i <= n; i++)
        visited[i] = false;
 
    // Call the recursive helper function
    // to store Topological
    // Sort starting from all
    // vertices one by one
    for (int i = 1; i <= n; i++)
        if (visited[i] == false)
            topologicalSortUtil(i, visited, Stack);
 
    vector<int>xx;
    // Print contents of stack
    while (Stack.empty() == false) {
        xx.push_back(Stack.top());
        Stack.pop();
    }
    return xx;
}
