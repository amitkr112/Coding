

ll n,m;
ll k;

const int K=+1e+5+5;
set<ll>v[K];
vector<ll>tree[K];
bool vis[K];
ll disc[K];
ll low[K];
ll t=0;
const int LG=20;
vector<ll>g[K];
ll parent[LG][K];
ll timer=0;
ll tin[K],tout[K],level[K];
map<pair<ll,ll>,ll>mp;
ll arr[K];
ll par[K];

void dfs(ll x)
{
   vis[x]=true;
   disc[x]=low[x]=++t;
   for(ll z:v[x])
   {
     if(!vis[z])
     {
      par[z]=x;
      dfs(z);
      low[x]=min(low[x],low[z]);
      if( low[z]>disc[x])
      {
        mp[{x,z}]=1;
        mp[{z,x}]=1;
        //cout<<x<<" "<<z<<endl;
      }
     }
     else if(z!=par[x])
     {
        low[x]=min(low[x],disc[z]);
     }
   }

   return ;
}

void fun(ll x,ll cnt)
{
    vis[x]=1;
    //tree[cnt].pb(x);
    arr[x]=cnt;
    for(ll y:v[x])
    {
        if(!vis[y])
            fun(y,cnt);
    }
}



int __lca(int u,int v)
{
    if(level[u]<level[v])
        swap(u,v);
    int diff=level[u]-level[v];
    for(int i=LG-1;i>=0;i--)
    {
        if((1<<i) & diff){
            u=parent[i][u];
        }
    }
    if(u==v)
        return u;
    for(int i=LG-1;i>=0;i--)
    {
        if(parent[i][u] and parent[i][u]!=parent[i][v])
        {
            u=parent[i][u];
            v=parent[i][v];
        }
    }
    return parent[0][u];
}

void dfs3(ll v,ll par,ll lvl)
{
    //arr[v]=cnt;
    tin[v]=++timer;
    parent[0][v]=par;
    level[v]=lvl;

    for(auto &u:tree[v])
    {
        if(u==par)
            continue;
        dfs3(u,v,lvl+1);
    }
    tout[v]=timer;
}
bool is_ancestor(int u,int v)
{
    return (tin[u]<=tin[v] and tout[u]>=tout[v]);
}
void precompute()
{
    for(int i=1;i<LG;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(parent[i-1][j])
            {
                parent[i][j]=parent[i-1][parent[i-1][j]];
            }
        }
    }
}

ll distance(ll u,ll v)
{
    return level[u]+level[v]-2*level[__lca(u,v)];
}

void bfs(ll src,ll dest,ll ans )
{
    vis[src]=1;
    if(src==dest)
    {
        cout<<ans<<endl;
        return ;
    }
    for(ll x:v[src])
    {
        if(!vis[x])
            bfs(x,dest,ans+mp[{x,src}]);
    }
    return ;
}

void solve()
{
    cin>>n>>m;
    ll x,y;
    fr(m)
    {
      cin>>x>>y;
      v[x].ins(y);
      v[y].ins(x);
      mp[{x,y}]=0;
      mp[{y,x}]=0;
    }


    for(ll i=1;i<=n;i++)
    {
      if(!vis[i])
        dfs(i);
    }

    
    for(auto it=mp.begin();it!=mp.end();++it)
    {
        ll v1=it->f.f;
        ll v2=it->f.s;
        ll v3=it->s;
        if(v3==1)
        {
            v[v1].erase(v2);
            //tree[arr[v1]].pb(arr[v2]);
            //tree[v2].pb(v1);
        }
    }

    mem0(vis);
    ll cnt=1;
    for(ll i=1;i<=n;i++)
    {
        if(!vis[i])
        {
            fun(i,cnt);
            cnt++;
        }
    }

    for(auto it=mp.begin();it!=mp.end();++it)
    {
        ll v1=it->f.f;
        ll v2=it->f.s;
        ll v3=it->s;
        if(v3==1)
        {
            //v[v1].erase(v2);
            tree[arr[v1]].pb(arr[v2]);
            //tree[v2].pb(v1);
        }
    }

   

    dfs3(1,0,0);
    precompute();

    
    cin>>k;
    for(ll i=1;i<=k;i++)
    {
        ll x,y;
        cin>>x>>y;
        //mem0(vis);
        //bfs(x,y,0);
        ll xx=arr[x];
        ll yy=arr[y];
       //  cout<<xx<<" "<<yy<<endl;
        // cout<<level[xx]<<" "<<level[yy]<<" "<<__lca(xx,yy)<<endl;
         ll ans=distance(xx,yy);
         cout<<ans<<endl;
    }

    return ;
}
