
void bridgeUtil(int u, bool visited[], int disc[],int low[], int parent[])
{
    // A static variable is used for simplicity, we can
    // avoid use of static variable by passing a pointer.

    // Mark the current node as visited
    visited[u] = true;

    // Initialize discovery time and low value
    disc[u] = low[u] = ++tt;

    for (ll v:g[u])
    {
        
        // If v is not visited yet, then recur for it
        if (!visited[v])
        {
            parent[v] = u;
            bridgeUtil(v, visited, disc, low, parent);

            // Check if the subtree rooted with v has a
            // connection to one of the ancestors of u
            low[u] = min(low[u], low[v]);

            // If the lowest vertex reachable from subtree
            // under v is below u in DFS tree, then u-v
            // is a bridge
            if (low[v] > disc[u])
            {
                b=1;
                cout << u <<" " << v << endl;
            }
        }

        // Update low value of u for parent function calls.
        else if (v != parent[u])
            low[u] = min(low[u], disc[v]);
    }
}

// DFS based function to find all bridges. It uses recursive
// function bridgeUtil()
void bridge()
{
    // Mark all the vertices as not visited
    bool *visited = new bool[n+1];
    int *disc = new int[n+1];
    int *low = new int[n+1];
    int *parent = new int[n+1];

    // Initialize parent and visited arrays
    for (int i = 1; i <=n; i++)
    {
        parent[i] = 0;
    }

    // Call the recursive helper function to find Bridges
    // in DFS tree rooted with vertex 'i'
    for (int i = 1; i <=n; i++)
        if (visited[i] == false)
            bridgeUtil(i, visited, disc, low, parent);
}