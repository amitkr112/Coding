#include <bits/stdc++.h>
#include <algorithm>
using namespace std;
#define vi             vector<ll> 
#define mi             map<ll,ll>
#define pi             pair<ll,ll>
#define pqueue         priority_queue<ll,vector<ll>,greater<ll>>
#define si             set<ll>
#define endl            "\n"
#define ins             insert 
#define hell             1000000007
#define INF             +2e+18
#define PI              3.1415926535897932384
#define ll              long long 
#define f               first
#define s              second
#define pb             push_back
#define pp             pop_back
#define fr(n)          for(ll i=0;i<n;i++)
#define FAST           ios_base::sync_with_stdio(false); cin.tie(NULL);
#define narak             998244353 
#define decimal(n)  std::cout << std::fixed;std::cout << std::setprecision(n);
#define make make_pair
#define mem0(a)         memset(a,0,sizeof(a))
#define mem1(a)         memset(a,-1,sizeof(a))
#define ALL(v) v.begin(), v.end()
#define SORT(v) sort(ALL(v))  
#define REVERSE(v) reverse(ALL(v))
#define maxc(v) max_element(all(v))
#define minc(v) min_element(all(v))
#define GCD(m,n) __gcd(m,n)
#define LCM(m,n) m*(n/GCD(m,n))
#define sz(a) (ll)a.size()
#define loop(i,a,b) for(ll i=a;i<=b;i++)
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

//template <typename T> 
//jj
//using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>
//#define ordered_set tree<pair<int,int>, null_type,less<pair<int,int>>, rb_tree_tag,tree_order_statistics_node_update>
//std::ifstream in("input.txt");
//std::ofstream out("output.txt");


INT_MIN Minimum value for a variable of type int. -2147483647 
INT_MAX Maximum value for a variable of type int.  2147483647
LLONG_MIN Minimum value for a variable of type long long. -9,223,372,036,854,775,807 
LLONG_MAX Maximum value for a variable of type long long.  9,223,372,036,854,775,807


bool comp(ll a,ll b) 
{ return (a < b); } 

map<ll,ll>allpowofno(ll n)
{
    map<ll,ll>mp;
    for(ll i=2;i*i<=n;i++)
    {
        if(n%i==0)
        {
            mp[i]++;
            n/=i;
            i--;
        }
    }
    if(n!=1)
    mp[n]++;
    return mp;}
ll primepow(ll n,ll k)
{
    ll res=0;
    whileðŸ‘Ž
    {
      n/=k;
      res+=n;
    }
    return res;}
ll allpowofnocomp(ll n,ll k)
{
    mi mp=allpowofno(k);
    ll ans;
    for(auto it=mp.begin();it!=mp.end();++it)
    {
        cout<<it->f<<" "<<it->s<<endl;
        ll z=primepow(n,it->f);
        ans=min(ans,z/(it->s));
    }
    return ans;    }


bool sortbysec(const pair<ll,ll> &a, const pair<ll,ll> &b) 
{
  return (a.second < b.second); 
} 



ll modInverse(ll n,ll p) 
{ 
    return power(n,p-2,p); 
}


void buildtree(ll *tree,ll *s,ll index,ll start,ll end)
{
    if(start>end)
    return ;
    if(start==end)
    {
        tree[index]=s[start];
        return;
    }
    ll mid=(start+end)/2;
    buildtree(tree,s,2*index,start,mid);
    buildtree(tree,s,2*index+1,mid+1,end);
    ll left=tree[2*index];
    ll right=tree[2*index+1];
    tree[index]=max(left,right);
    return ;
}
ll query(ll *tree,ll index,ll s,ll e,ll qs,ll qe)
{
    // no overlap
    if(qs>e||s>qe)
    return int_MIN;
    if(qe>=e&&s>=qs)
    {
        return tree[index];
    }
    ll mid=(s+e)/2;
    ll left=query(tree,2*index,s,mid,qs,qe);
    ll right=query(tree,2*index+1,mid+1,e,qs,qe);
    return max(left,right);
}
buildtree(tree,s,1,0,n-1); // 1 based tree is formed but array is 0 based
query(tree,1,0,n-1,x,y); // x and y are indexss





void Mobius()
{
    mobius[1]=1;
    for(ll i=2;i<=N-2;++i)
    {
        if(lpf[i/lpf[i]]==lpf[i])
            mobius[i]=0;
        else
            mobius[i]=-1*mobius[i/lpf[i]];
    }
}







vector<ll>fac(100005);

ll power(ll x,ll y,ll p)
{
    ll res = 1; // Initialize result
    x = x % p; // Update x if it is more than or equal to p
    while (y > 0) 
    {
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res * x) % p;
        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x) % p;
    }
    return res;
}
ll modInverse(ll n,ll p)
{
    return power(n, p - 2, p);
}
void build()
{
    fac[0]=1;
    fac[1]=1;
    for(ll i=2;i<=100000;i++)
    {
        fac[i]=i*fac[i-1];
        fac[i]%=hell;
    }

}


*/  

const ll N=+2e+5+5;
vector<ll>g[N];
ll n;
ll vis[N];
ll level[N];
ll parent[22][N];

vector<ll> find_diameter()
{
    queue<ll>q;
    vector<ll>path;
    q.push(1);
    ll prev=1;
    vis[1]=1;
    while(!q.empty())
    {
        prev=q.front();
        q.pop();
        
        for(ll x:g[prev])
        {
            if(!vis[x])
            {
                vis[x]=1;
                q.push(x);
            }
        }
    }
//    cout<<prev<<endl;
    
    ll bb[n+1];
    bb[prev]=-1;
    queue<ll>q2;
    
    for(ll i=1;i<=n;i++)
    vis[i]=0;
    
    q2.push(prev);
    vis[prev]=1;
    ll last=prev;
    while(!q2.empty())
    {
        last=q2.front();
        q2.pop();
        
        for(ll x:g[last])
        {
            if(!vis[x])
            {
                vis[x]=1;
                bb[x]=last;
                q2.push(x);
            }
        }
    }
    
   // cout<<last<<endl;
    
    ll cnt=0;
    while(last!=-1)
    {
  //      cout<<last<<" ";
        path.pb(last);
        last=bb[last];
    }
  //  cout<<endl;
    
//    for(ll i=1;i<=n;i++)
  //  cout<<i<<" "<<bb[i]<<endl;
    
    return path;
}



ll dp[N][2];
void bfs(vector<ll>&path)
{
    queue<ll>q;
    for(ll i=1;i<=n;i++)
    vis[i]=0;
    
    for(ll x:path)
    {
        dp[x][0]=0;
        dp[x][1]=x;
        q.push(x);
        vis[x]=1;
        
    }
    
    while(!q.empty())
    {
        ll node=q.front();
        q.pop();
        for(ll x:g[node])
        {
            if(!vis[x])
            {
                vis[x]=1;
                dp[x][0]=dp[node][0]+1;
                dp[x][1]=dp[node][1];
                q.push(x);
            }
        }
    }
    
   // for(ll i=1;i<=n;i++)
//    cout<<i<<" "<<dp[i][1]<<" "<<dp[i][0]<<endl;
    
}

void func(ll node,ll dist)
{
    set<ll>s;
    s.ins(node);
    queue<pair<ll,ll>>q;
    q.push({node,0});
    while(!q.empty())
    {
        pair<ll,ll>p=q.front();
        q.pop();
        if(p.s==dist)
        {
            cout<<p.f<<endl;
            return ;
        }
        for(ll x:g[p.f])
        {
            if(s.find(x)==s.end())
            {
                q.push({x,p.s+1});
                s.ins(x);
            }
        }
    }
}


void solve(ll nn)
{
    cin>>n;
    for(ll i=1;i<n;i++)
    {
        ll x,y;
        cin>>x>>y;
        g[x].pb(y);
        g[y].pb(x);
    }
    vector<ll>path=find_diameter();
    
    
    map<ll,ll>mp;
    for(ll i=0;i<path.size();i++)
    {
        mp[path[i]]=i+1;
    }
//    for(ll x:path)
  //  cout<<x<<" ";
    //cout<<endl;
    
    //dfs(1,0,1);
    
    
    bfs(path);
    
    
    
    
    ll q;
    cin>>q;
    fr(q)
    {
        ll node,k;
        cin>>node>>k;
        if(mp.count(node))
        {
            //cout<<"node "<<node<<" found"<<endl;
            ll pos=mp[node];
            ll mx=pos-1;
            mx=max(mx,(ll)path.size()-pos);
            if(mx<k)
            {
                cout<<-1<<endl;
            }
            else
            {
                ll r1=pos-1+k;
                if(r1<path.size())
                {
                    cout<<path[r1]<<endl;
                    continue;
                }
                
                ll l1=pos-1-k;
                if(l1>=0)
                {
                    cout<<path[l1]<<endl;
                    continue;
                }
                
            }
        }
        else
        {
            //cout<<"node "<<node<<" not found"<<endl;
            
            
            ll ans=dp[node][0];
            k-=ans;
            
            if(k<0)
            {
                func(node,k+ans);
                continue;
            }
            node=dp[node][1];
            
            //cout<<node<<" "<<k<<endl;
            
            ll pos=mp[node];
            ll mx=pos-1;
            mx=max(mx,(ll)path.size()-pos);
            if(mx<k)
            {
                cout<<-1<<endl;
            }
            else
            {
                ll r1=pos-1+k;
                if(r1<path.size())
                {
                    cout<<path[r1]<<endl;
                    continue;
                }
                
                ll l1=pos-1-k;
                if(l1>=0)
                {
                    cout<<path[l1]<<endl;
                    continue;
                }
                
            }
            
        }
        
        
    }
    
    
 
    return ;
}

int main()
{ 
   decimal(15);
   FAST;
   //build();
   //LPF();
   ll t;
   t=1;
   //cin>>t;  
   for(ll i=1;i<=t;i++)
   solve(i);
   return 0;
}