/**
     Failing doesnâ€™t give you a reason to give up,
     as long as you believe.
                                  - Seventh Hokage
                                   (COPIED TEXT FROM BABUMOSHAI)
**/

#include <bits/stdc++.h>
#include <algorithm>
#include <string>
using namespace std;
//#include <ext/pb_ds/assoc_container.hpp> 
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template <typename T>
//using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define vi             vector<ll> 
#define mi             map<ll,ll>
#define pi             pair<ll,ll>
#define si             set<ll>
#define endl            "\n"
#define ins             insert 
#define hell             1000000007
#define PI              3.1415926535897932384
#define ll              long long 
#define f               first
#define s              second
#define pb             push_back
#define pp             pop_back
#define dash()         cout<<"--------"<<endl
#define fr(n)          for(ll i=0;i<n;i++)
#define FAST           ios_base::sync_with_stdio(false); cin.tie(NULL);
#define narak             998244353 
#define decimal(n)  std::cout << std::fixed;std::cout << std::setprecision(n);
#define make make_pair
#define mem0(a)         memset(a,0,sizeof(a))
#define mem1(a)         memset(a,-1,sizeof(a))
#define ALL(v) v.begin(), v.end()
#define SORT(v) sort(ALL(v))  
#define REVERSE(v) reverse(ALL(v))
#define maxc(v) max_element(all(v))
#define minc(v) min_element(all(v))
#define GCD(m,n) __gcd(m,n)
#define LCM(m,n) m*(n/GCD(m,n))
#define sz(a) (ll)a.size()
#define loop(i,a,b) for(ll i=a;i<=b;i++)

// for debugging

#define see(x)         cout<<#x<<" = "<<x<<endl
#define see2(x,y)      cout<<#x<<" = "<<x<<"::"<<#y<<" = "<<y<<endl


//std::ifstream in("input.txt");
//std::ofstream out("output.txt");
/*

INT_MIN Minimum value for a variable of type int. -2147483647 
INT_MAX Maximum value for a variable of type int.  2147483647
LLONG_MIN Minimum value for a variable of type long long. -9,223,372,036,854,775,807 
LLONG_MAX Maximum value for a variable of type long long.  9,223,372,036,854,775,807


bool comp(ll a,ll b) 
{ return (a < b); } 

bool sortbysec(const pair<ll,ll> &a, const pair<ll,ll> &b) 
{
  return (a.second < b.second); 
} 



ll spf[1000005];
void build()
{
    for(ll i=2;i<1000005;i++)
    {
        if(!spf[i])
        {
            for(ll j=1;j*i<1000005;j++)
            {
            if(!spf[i*j])
              spf[i*j]=i;  
            }
        }
    }   
}
*/




const int N=+2e+5+5;
const int LG=21;
vector<pair<ll,ll>>g[N];
ll parent[LG][N];
ll timer=0;
ll tin[N],tout[N],level[N];
ll n;
ll dist[LG][N];
ll a[N];
ll w[N];
ll val[N];
int __lca(int u,int v)
{
    if(level[u]<level[v])
        swap(u,v);
    int diff=level[u]-level[v];
    for(int i=LG-1;i>=0;i--)
    {
        if((1<<i) & diff){
            u=parent[i][u];
        }
    }
    if(u==v)
        return u;
    for(int i=LG-1;i>=0;i--)
    {
        if(parent[i][u] and parent[i][u]!=parent[i][v])
        {
            u=parent[i][u];
            v=parent[i][v];
        }
    }
    return parent[0][u];
}


void dfs(ll v,ll par,ll lvl)
{
    tin[v]=++timer;
    parent[0][v]=par;
    dist[0][v]=w[v];
    level[v]=lvl;
    
    for(auto &u:g[v])
    {
        if(u.f==par)
            continue;
        dfs(u.f,v,lvl+1);
    }
    tout[v]=timer;
}
bool is_ancestor(int u,int v)
{
    return (tin[u]<=tin[v] and tout[u]>=tout[v]);
}
void precompute()
{
    for(int i=1;i<LG;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(parent[i-1][j])
            {
                parent[i][j]=parent[i-1][parent[i-1][j]];
                dist[i][j]=dist[i-1][j]+dist[i-1][parent[i-1][j]];
            }
        }
    }
}

ll kthancestor(ll v,ll p)
{
    ll curr=v;
    for(ll i=20;i>=0;i--)
    {
        if( (1<<i) & p)
            curr=parent[i][curr];
    }
    return curr;
}



ll distance(ll u,ll v)
{
    return level[u]+level[v]-2*level[__lca(u,v)];
}

ll find_node_at_distance(ll u,ll d)
{
    if(d==0)
    return u;
    ll curr=(ll)log2(d);
    ll ans=u;
    while(curr>=0)
    {
        if(d>=(ll)pow(2,curr))
        {
            ans=parent[curr][ans];
            d-=(ll)pow(2,curr);
        }
        curr--;
    }
    return ans;
}


ll find_distance_at_distance(ll u,ll d)
{
    if(d==0)
    return 0;
    ll curr=(ll)log2(d);
    ll ans=u;
    ll tot=0;
    while(curr>=0)
    {
        if(d>=(ll)pow(2,curr))
        {
            tot+=dist[curr][ans];  
            ans=parent[curr][ans];
            d-=(ll)pow(2,curr);
        }
        curr--;
    }
    return tot;
}

void dfs2(ll node,ll par)
{
    for(auto it:g[node])
    {
        if(it.f==par)
        continue;
        
        dfs2(it.f,node);
        val[node]+=val[it.f];
        
    }
}

bool check(ll k, ll ind)
{
	ll cur=ind;
	ll curcost=0;
	for(int i=0;i<LG;i++)
	{
		if(k & (1<<i))
		{
			curcost+=dist[i][cur];
			cur=parent[i][cur];
		}
	}
	if(!cur)
	{
		return 0;
	}
	if(curcost<=a[ind])
	{
		return 1;
	}
	else
	{
		return 0;
	}
}
 
ll walk(ll k, ll ind)
{
	ll cur=ind;
	for(int i=0;i<LG;i++)
	{
		if(k & (1<<i))
		{
			cur=parent[i][cur];
		}
	}
	return cur;
}
 
ll binarysearch(ll lo, ll hi, ll ind)
{
	while(lo<hi)
	{
		ll mid=(lo+hi+1)>>1;
		if(check(mid, ind))
		{
			lo=mid;
		}
		else
		{
			hi=mid-1;
		}
	}
	ll store=walk(lo, ind);
	val[parent[0][store]]-=1;
    val[parent[0][ind]]+=1;
	return lo;
}

int main()
{
    FAST;
    cin>>n;
    for(ll i=1;i<=n;i++)
    cin>>a[i];
    for(ll i=2;i<=n;i++)
    {
        ll x,y;
        cin>>x>>y;
        w[i]=y;
        g[i].pb({x,y});
        g[x].pb({i,y});
        parent[0][i]=x;
        dist[0][i]=y;
    }
    
    //dfs(1,0,0);
    precompute();
    for(int i=1;i<=n;i++)
	{
		binarysearch(0, n, i);
	}
	dfs2(1,0);
    for(ll i=1;i<=n;i++)
    cout<<val[i]<<" ";
}
